# ملاحظة: هذا ملف Excel يجب إنشاؤه باستخدام مكتبة Python
# سأنشئ نموذج Python لإنشاء جدول البيانات المالية

import pandas as pd
import openpyxl
from openpyxl.styles import Font, Fill, Border, Side, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows
from datetime import datetime, date

def create_financial_spreadsheet():
    """
    إنشاء جدول بيانات مالي تفاعلي مع FinClick.AI
    """
    # إنشاء مصنف جديد
    wb = openpyxl.Workbook()

    # إزالة الورقة الافتراضية
    wb.remove(wb.active)

    # إنشاء الأوراق المختلفة
    create_dashboard_sheet(wb)
    create_income_statement_sheet(wb)
    create_balance_sheet_sheet(wb)
    create_cash_flow_sheet(wb)
    create_ratios_sheet(wb)
    create_charts_sheet(wb)

    return wb

def create_dashboard_sheet(wb):
    """إنشاء ورقة لوحة المعلومات"""
    ws = wb.create_sheet("Dashboard", 0)

    # العنوان الرئيسي
    ws['A1'] = 'FinClick.AI - لوحة المعلومات المالية'
    ws['A1'].font = Font(name='Arial', size=20, bold=True, color='1E40AF')
    ws.merge_cells('A1:H1')
    ws['A1'].alignment = Alignment(horizontal='center')

    # معلومات التقرير
    ws['A3'] = 'تاريخ التقرير:'
    ws['B3'] = '{{REPORT_DATE}}'
    ws['A4'] = 'الفترة المالية:'
    ws['B4'] = '{{FINANCIAL_PERIOD}}'
    ws['A5'] = 'اسم الشركة:'
    ws['B5'] = '{{COMPANY_NAME}}'

    # المؤشرات الرئيسية
    ws['A7'] = 'المؤشرات المالية الرئيسية'
    ws['A7'].font = Font(size=16, bold=True, color='16A34A')

    # جدول المؤشرات
    headers = ['المؤشر', 'القيمة الحالية', 'القيمة السابقة', 'التغيير (%)', 'الحالة']
    for col, header in enumerate(headers, 1):
        cell = ws.cell(row=9, column=col, value=header)
        cell.font = Font(bold=True, color='FFFFFF')
        cell.fill = Fill(start_color='1E40AF', end_color='1E40AF', fill_type='solid')
        cell.alignment = Alignment(horizontal='center')

    # بيانات المؤشرات
    metrics_data = [
        ['إجمالي الإيرادات', '{{TOTAL_REVENUE}}', '{{PREV_REVENUE}}', '{{REVENUE_CHANGE}}', '{{REVENUE_STATUS}}'],
        ['صافي الربح', '{{NET_PROFIT}}', '{{PREV_PROFIT}}', '{{PROFIT_CHANGE}}', '{{PROFIT_STATUS}}'],
        ['هامش الربح (%)', '{{PROFIT_MARGIN}}', '{{PREV_MARGIN}}', '{{MARGIN_CHANGE}}', '{{MARGIN_STATUS}}'],
        ['العائد على الاستثمار', '{{ROI}}', '{{PREV_ROI}}', '{{ROI_CHANGE}}', '{{ROI_STATUS}}'],
        ['نسبة السيولة', '{{LIQUIDITY_RATIO}}', '{{PREV_LIQUIDITY}}', '{{LIQUIDITY_CHANGE}}', '{{LIQUIDITY_STATUS}}']
    ]

    for row, data in enumerate(metrics_data, 10):
        for col, value in enumerate(data, 1):
            ws.cell(row=row, column=col, value=value)

    # منطقة الرسوم البيانية
    ws['A16'] = 'الرسوم البيانية'
    ws['A16'].font = Font(size=16, bold=True, color='DC2626')

    ws['A18'] = '[رسم بياني: تطور الإيرادات]'
    ws['D18'] = '[رسم بياني: توزيع المصروفات]'
    ws['A25'] = '[رسم بياني: النسب المالية]'
    ws['D25'] = '[رسم بياني: التدفق النقدي]'

    return ws

def create_income_statement_sheet(wb):
    """إنشاء ورقة قائمة الدخل"""
    ws = wb.create_sheet("Income Statement")

    # العنوان
    ws['A1'] = 'قائمة الدخل - Income Statement'
    ws['A1'].font = Font(size=18, bold=True, color='1E40AF')
    ws.merge_cells('A1:E1')
    ws['A1'].alignment = Alignment(horizontal='center')

    # رؤوس الأعمدة
    headers = ['البيان', 'العام الحالي', 'العام السابق', 'التغيير', 'النسبة (%)']
    for col, header in enumerate(headers, 1):
        cell = ws.cell(row=3, column=col, value=header)
        cell.font = Font(bold=True, color='FFFFFF')
        cell.fill = Fill(start_color='1E40AF', end_color='1E40AF', fill_type='solid')

    # بيانات قائمة الدخل
    income_data = [
        ['الإيرادات التشغيلية', '{{OPERATING_REVENUE}}', '{{PREV_OPERATING_REVENUE}}', '=B4-C4', '=(B4-C4)/C4*100'],
        ['المبيعات', '{{SALES}}', '{{PREV_SALES}}', '=B5-C5', '=(B5-C5)/C5*100'],
        ['إيرادات أخرى', '{{OTHER_REVENUE}}', '{{PREV_OTHER_REVENUE}}', '=B6-C6', '=(B6-C6)/C6*100'],
        ['إجمالي الإيرادات', '=B4+B5+B6', '=C4+C5+C6', '=B7-C7', '=(B7-C7)/C7*100'],
        ['', '', '', '', ''],
        ['تكلفة البضاعة المباعة', '{{COGS}}', '{{PREV_COGS}}', '=B9-C9', '=(B9-C9)/C9*100'],
        ['إجمالي الربح', '=B7-B9', '=C7-C9', '=B10-C10', '=(B10-C10)/C10*100'],
        ['', '', '', '', ''],
        ['المصروفات التشغيلية:', '', '', '', ''],
        ['مصروفات البيع والتسويق', '{{SALES_EXPENSES}}', '{{PREV_SALES_EXPENSES}}', '=B13-C13', '=(B13-C13)/C13*100'],
        ['المصروفات الإدارية', '{{ADMIN_EXPENSES}}', '{{PREV_ADMIN_EXPENSES}}', '=B14-C14', '=(B14-C14)/C14*100'],
        ['مصروفات أخرى', '{{OTHER_EXPENSES}}', '{{PREV_OTHER_EXPENSES}}', '=B15-C15', '=(B15-C15)/C15*100'],
        ['إجمالي المصروفات التشغيلية', '=B13+B14+B15', '=C13+C14+C15', '=B16-C16', '=(B16-C16)/C16*100'],
        ['', '', '', '', ''],
        ['الربح التشغيلي', '=B10-B16', '=C10-C16', '=B18-C18', '=(B18-C18)/C18*100'],
        ['', '', '', '', ''],
        ['الإيرادات والمصروفات غير التشغيلية:', '', '', '', ''],
        ['إيرادات الاستثمار', '{{INVESTMENT_INCOME}}', '{{PREV_INVESTMENT_INCOME}}', '=B21-C21', '=(B21-C21)/C21*100'],
        ['مصروفات التمويل', '{{FINANCE_COSTS}}', '{{PREV_FINANCE_COSTS}}', '=B22-C22', '=(B22-C22)/C22*100'],
        ['', '', '', '', ''],
        ['الربح قبل الضرائب', '=B18+B21-B22', '=C18+C21-C22', '=B24-C24', '=(B24-C24)/C24*100'],
        ['ضريبة الدخل', '{{INCOME_TAX}}', '{{PREV_INCOME_TAX}}', '=B25-C25', '=(B25-C25)/C25*100'],
        ['', '', '', '', ''],
        ['صافي الربح', '=B24-B25', '=C24-C25', '=B27-C27', '=(B27-C27)/C27*100']
    ]

    for row, data in enumerate(income_data, 4):
        for col, value in enumerate(data, 1):
            cell = ws.cell(row=row, column=col, value=value)
            if row in [7, 10, 16, 18, 24, 27]:  # الصفوف الإجمالية
                cell.font = Font(bold=True)
                cell.fill = Fill(start_color='F1F5F9', end_color='F1F5F9', fill_type='solid')

    return ws

# دالة الحفظ
def save_financial_spreadsheet(filename="financial_template.xlsx"):
    wb = create_financial_spreadsheet()
    wb.save(filename)
    return f"تم إنشاء {filename} بنجاح"

# تعليق: هذا الكود يجب تشغيله لإنشاء ملف Excel فعلي
# save_financial_spreadsheet()